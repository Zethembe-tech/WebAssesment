@model CommonDLL.DTO.AccountViewModel

@{
    ViewBag.Title = "Edit";
}
@if (TempData["Message"] != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<h2>Edit Accounts</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Code)

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.PersonCode, "Person", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.PersonCode, Model.PersonList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PersonCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AccountNumber, "Account Number", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.AccountNumber, Model.AccountList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OutstandingBalance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OutstandingBalance, new { @class = "form-control", @disabled = "disabled", value = Model.OutstandingBalance })
                @Html.HiddenFor(model => model.OutstandingBalance)
                @Html.ValidationMessageFor(model => model.OutstandingBalance, "", new { @class = "text-danger" })
            </div>
        </div>





        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary btn-sm" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
